#+title: Simulated Annealing Position Allocation Problem
#+author: Alexander Brown
#+date: \today

* Introduction
:PROPERTIES:
:CUSTOM_ID: sec:introduction
:END:

This document outlines a Simulated Annealing (SA) approach to the bus charging scheduling problem that utilizes Mixed
Integer Linear Programming (MILP) constraints to determine feasible charging schedules. The problem involves generating
an optimal charging schedule for a fleet of Battery Electric Buses (BEBs) based on a set of routes and a mix of fast and
slow chargers. The aim is to minimize both the consumption cost (amount of electricity used over a certain time) and the
demand cost (rate at which electricity is being used) while ensuring that the buses maintain sufficient charge to
complete their workday without delays.

The SA algorithm is introduced and constrained by a set of MILP constraints derived from the Position Allocation Problem
(PAP) to ensure the validity of proposed charging schedules. Objective functions describing consumption cost and demand
cost are used to minimize power consumption and total cost of using the BEBs.

* Requirements
This repository contains both the source code and the documentation/research for the code as a submodule. The code is
written in [[https://www.rust-lang.org/][rust]]. Rust was chosen for its performance, reliability, and its rich packaging system. Rust [[https://www.rust-lang.org/tools/install][can be installed
by following this link]].

This repository also includes the [[https://github.com/alexb7711/sa-pap-paper][partnered research paper]]. The document is written in [[https://orgmode.org/][org mode]], but has a LaTeX export
of the document that can be built with [[https://orgmode.org/][pdflatex]] and [[https://mg.readthedocs.io/latexmk.html][latexmk]]. These are typically bundled with a full installation of the
[[https://www.latex-project.org/][LaTeX]] environment. [[https://plantuml.com/][PlantUML]] is also utilized for some of the image generation.

Most (if not all) of the tasks are automated via [[https://taskfile.dev/][Task]]. Type =task -l= to get a list of tasks that can be run.

* Build/Test/Run Program
- Build: =cargo build=
- Test: =cargo test=
- Run: =cargo run=

* Building Documentation
- Rust crate documentation: =cargo doc --open=
- Everything in =docs= folder: =task docs=
- Everything in `docs/uml` folder: =task images=
